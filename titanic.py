"""Titanic
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1yacV3hfvQz3QwOrs1cYjw2-nwQbn-Jga
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import Imputer
from sklearn.preprocessing import LabelEncoder
import re
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score 

#extracting train.csv and test.csv in which titanic data is kept
train=pd.read_csv('train.csv')
test=pd.read_csv('test.csv')

#removing or dropping column:Name,Tickets
train = train.drop(['Name'],axis=1)
test= test.drop(['Name'],axis=1)
test= test.drop(['Ticket'],axis=1)
train= train.drop(['Ticket'],axis=1)


#replacing NaN with suitable value that is 'S=Southampton ' in embarked column
train1=[train]
test1=[test]
for datasets in train1:
  datasets['Embarked']=datasets['Embarked'].fillna('S')
  
for datasets in test1:
  datasets['Embarked']=datasets['Embarked'].fillna('S')  

  #replacing cabin with a new column deck
data=[train,test]
deck={"A": 1,"B": 2,"C": 3,"D": 4,"E": 5,"F": 6,"G": 7,"U": 8}

for datasets in data:
  datasets['Cabin']=datasets['Cabin'].fillna("U0")
  datasets['Deck']=datasets['Cabin'].map(lambda x: re.compile('([a-zA-Z]+)').search(x).group())
  datasets['Deck']=datasets['Deck'].map(deck)
  datasets['Deck']=datasets['Deck'].fillna(0)
  datasets['Deck']=datasets['Deck'].astype(int)

  #dropping column cabin from train and test data
train=train.drop(['Cabin'],axis=1)
test=test.drop(['Cabin'],axis=1)


#extracting training data from train.csv file
train_data=train[['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Deck']]

#extracting survived column into another file which is our training test data
train_test=train[['Survived']]  
  
y=test.iloc[:,0:].values                       #label_data
x=train_data.iloc[:,0:].values                 #train_data
z=train_test.iloc[:,0:].values                 #train_test


#filling the Nan(empty)  values of Age column with the mean values of ages
imp=Imputer(missing_values='NaN',axis=0,strategy='mean')
impute=imp.fit(x[0:,3:4])
x[:,3:4]=impute.transform(x[:,3:4])
y[:,3:4]=impute.transform(y[:,3:4])
x[:,6:7]=impute.transform(x[:,6:7])
y[:,6:7]=impute.transform(y[:,6:7])



#calling label encoder in variable sex and embarked
sex=LabelEncoder()
embarked=LabelEncoder()


#converting sex column into int where male=1 and female=0
x[:,2]=sex.fit_transform(x[:,2]) 
y[:,2]=sex.fit_transform(y[:,2]) 


#converting embarked values into integer value where 0=Cherbourg 1=Queenstown and 2=Southampton  
x[:,7]=embarked.fit_transform(x[:,7])
y[:,7]=embarked.fit_transform(y[:,7])


#saving the numpy format variable 'x' and 'y' into csv file format
np.savetxt("train_data1.csv", x, delimiter=",", fmt='%s')
np.savetxt("label_data1.csv", y, delimiter=",", fmt='%s')
np.savetxt("train_test1.csv", z, delimiter=",",fmt='%s')

#providing column names to train_data1.csv and label_data1.csv
colnames3=['PassengerId','Pclass','Sex','Age','SibSp','Parch','Fare','Embarked','Deck'] 
col_names=['Survived']

#reading the csv file using pandas
x1=pd.read_csv('train_data1.csv',names=colnames, header=None)
y1=pd.read_csv('label_data1.csv',names=colnames, header=None)
z1=pd.read_csv('train_test1.csv', names=col_names, header=None)


data1=[x1,y1] 
#Categorizing age into four age groups that are--->child:0 young:1 Adult:2 Mid-age:3 senior:4
for datasets in data1:
  datasets.loc[ datasets['Age'] <= 16, 'Age']= 0,
  datasets.loc[ (datasets['Age'] > 16) & (datasets['Age'] <=26), 'Age']=1,
  datasets.loc[ (datasets['Age'] > 26) & (datasets['Age'] <=36), 'Age']=2,
  datasets.loc[ (datasets['Age'] > 36) & (datasets['Age'] <=62), 'Age']=3,
  datasets.loc[ datasets['Age'] > 62, 'Age']= 4
  
  
#calling decision tree classifier
dclf=DecisionTreeClassifier()

# applying  training  data for dec_tree
trained=dclf.fit(x1,z1)

#now time for  prediction for decision tree
predict=trained.predict(y1)

#reading gender_submission file that conatins label test data
test_label=pd.read_csv('gender_submission.csv')

#removing or dropping column:Name,Tickets
test_label = test_label.drop(['PassengerId'],axis=1)

#calculating accuracy of the prediction
acc1=accuracy_score(test_label,predict)

#Accuracy score
print('Accuracy Score:',acc1)
